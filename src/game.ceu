#define CEU_SDL_MODE_FRAME (1000/60)
#include "c.ceu"
#include "sdl/sdl.ceu"

#define WINDOW_W 800
#define WINDOW_H 600

#define WORLD_W 25
#define WORLD_H 19

#define PI 3.1415926535897932

native/pre do
    #include "../include/AStar.c"
    #include "../include/AStarGrid.c"
end

native _ASPath, _PathNode;

native/nohold 
    _ASPathCreate,
    _ASPathGetCount,
    _ASPathGetNode,
    _loadWorld;

var&? SDL_Init sdl =
    spawn SDL_Init("AStar Tests", WINDOW_W, WINDOW_H, SDL_Color(0xFF,0xFF,0xFF,0xFF));

watching sdl do
    _loadWorld("./res/level00.map");

    var int startX = 0;
    var int startY = 0;
    var int endX = 12;
    var int endY = 12;

    #include "pathfinder.ceu"
    var& Pathfinder pf = spawn Pathfinder(startX,startY,endX,endY);

    #include "block.ceu"
    pool[] Block blocks;

    var int i;
    var int j;
    loop i in [0 -> WORLD_H[ do
        loop j in [0 -> WORLD_W[ do
            if ({world[@j + (@i * WORLD_W)]} == 1) then
                spawn Block(j*BLOCK_SIZE, i*BLOCK_SIZE) in blocks;
            end
            // { printf("%d ", world[@j + (@i * WORLD_W)]); }
        end
    end

    par do
        loop do 
            par/or do 
                var _SDL_MouseMotionEvent&& m;
                m = await SDL_MOUSEMOTION;
                endX = m:x/32; endY = m:y/32;
            with
                var _SDL_MouseButtonEvent&& m;
                m = await SDL_MOUSEBUTTONDOWN until (m:button==_SDL_BUTTON_LEFT);
                startX = m:x/32; startY = m:y/32;
            end
            emit pf.do_retarget(startX,startY,endX,endY);
        end
    with 
        var int drawOffset = BLOCK_SIZE/2;
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&sdl!.ren, 0xFF,0x00,0x00, 0xFF);
            _SDL_RenderDrawLine(&&sdl!.ren, startX * BLOCK_SIZE, startY * BLOCK_SIZE, (startX+1) * BLOCK_SIZE, (startY+1) * BLOCK_SIZE);
            _SDL_RenderDrawLine(&&sdl!.ren, startX * BLOCK_SIZE, (startY+1) * BLOCK_SIZE, (startX+1) * BLOCK_SIZE, startY * BLOCK_SIZE);
            if ($pf.path > 0) then
                var usize ui;
                var PathNode currnode;
                var PathNode nextnode = pf.path[0];
                loop ui in [1 -> $pf.path[ do
                    currnode = nextnode;
                    nextnode = pf.path[ui];
                    _SDL_RenderDrawLine(&&sdl!.ren, 
                                        drawOffset + currnode.x * BLOCK_SIZE, drawOffset + currnode.y * BLOCK_SIZE,
                                        drawOffset + nextnode.x * BLOCK_SIZE, drawOffset + nextnode.y * BLOCK_SIZE);
                end
            end
        end
    end
end

escape 0;

